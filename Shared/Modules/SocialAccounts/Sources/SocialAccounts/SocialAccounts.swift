import Foundation
import os
import AppFoundation
import Statistics
import Files
import ModelEnvironment
import Succession
import LifeExpense
import PatrimoineModel
import FamilyModel
import BalanceSheet
import CashFlow
import SimulationLogger
import Kpi

private let customLog = Logger(subsystem: "me.michaud.lionel.Patrimoine", category: "Model.SocialAccounts")

// MARK: - Comptes sociaux

/// Comptes sociaux: Table de Compte de rÃ©sultat annuels + Bilans annuels
public struct SocialAccounts {
    public init() {
    }
    
    // MARK: - Properties
    
    /// Comptes de rÃ©sultats annuels
    public var cashFlowArray = CashFlowArray()
    /// Bilans annuels
    public var balanceArray  = BalanceSheetArray()
    /// PremiÃ¨re annÃ©e de calcul des comptes sociaux
    var firstYear     = CalendarCst.thisYear
    /// DerniÃ¨re annÃ©e de calcul des comptes sociaux
    var lastYear      = CalendarCst.thisYear
    /// les successions lÃ©gales survenues depuis le dÃ©but du run
    public var legalSuccessions   : [Succession] = []
    /// les transmissions d'assurances vie survenues depuis le dÃ©but du run
    public var lifeInsSuccessions : [Succession] = []
    /// soldes nets de l'hÃ©ritage reÃ§u par les enfants Ã  chaque dÃ©cÃ¨s depuis le dÃ©but du run
    var netChildrenInheritances: [Double] = []

    // MARK: - Computed Properties
    
    // MARK: - Methods
    
    /// Construire la table de comptes sociaux au fil des annÃ©es: comptes sociaux = Bilan + CashFlow
    /// - Parameters:
    ///   - run: numÃ©ro du run en cours de calcul
    ///   - nbOfYears: nombre d'annÃ©es Ã  construire
    ///   - family: la famille dont il faut faire le bilan
    ///   - expenses: les dÃ©penses de la famille
    ///   - patrimoine: le patrimoine de la famille
    ///   - kpis: les KPI Ã  utiliser et Ã  dont il faut mettre Ã  jour l'histogramme pendant le run
    ///   - simulationMode: mode de simluation en cours
    ///   - model: modÃ¨le Ã  utiliser
    /// - Returns: RÃ©sultats obtenus pour les KPI
    public mutating func build(run                       : Int, // swiftlint:disable:this function_parameter_count
                               nbOfYears                 : Int,
                               withFamily family         : Family,
                               withExpenses expenses     : LifeExpensesDic,
                               withPatrimoine patrimoine : Patrimoin,
                               withKPIs kpis             : inout KpiDictionary,
                               withMode simulationMode   : SimulationModeEnum,
                               using model               : Model) -> KpiResultsDictionary {
        // crÃ©ation du calculateur de KPIs
        var kpiComputer = KpiComputer(simulationMode : simulationMode,
                                      model          : model,
                                      family         : family)
        
        //-------------------------------------------------------------------------------------------
        firstYear = CalendarCst.thisYear
        lastYear  = firstYear + nbOfYears - 1
        cashFlowArray.reserveCapacity(nbOfYears)
        balanceArray.reserveCapacity(nbOfYears)
        
        // mÃ©moriser la valeur initiale du patrimoine financier net (hors immobilier)
        let initialNetAdultsFinancialAssets = patrimoine.value(atEndOf: firstYear)

        for year in firstYear ... lastYear {
            // construire la ligne annuelle de Cash Flow
            //------------------------------------------
            /// gÃ©rer le report d'imposition
            var lastYearDelayedFlatTax: Double
            if let lastLine = cashFlowArray.last { // de l'annÃ©e prÃ©cÃ©dente, s'il y en a une
                lastYearDelayedFlatTax = lastLine.flatTaxDelayedToNextYear.value(atEndOf: year - 1)
            } else {
                lastYearDelayedFlatTax = 0
            }
            
            /// ajouter une nouvelle ligne pour une nouvelle annÃ©e
            do {
//                print(lifeInsSuccessions.last?.description)
                let newCashFlowLine =
                    try CashFlowLine(run                    : run,
                                     withYear               : year,
                                     withFamily             : family,
                                     withExpenses           : expenses,
                                     withPatrimoine         : patrimoine,
                                     lastYearDelayedFlatTax : lastYearDelayedFlatTax,
                                     previousSuccession     : lifeInsSuccessions.last,
                                     using                  : model)
                cashFlowArray.append(newCashFlowLine)
                // ajouter les Ã©ventuelles successions survenues pendant l'annÃ©e Ã  la liste globale
                legalSuccessions   += newCashFlowLine.legalSuccessions
                // ajouter les Ã©ventuelles transmissions d'assurance vie survenues pendant l'annÃ©e Ã  la liste globale
                lifeInsSuccessions += newCashFlowLine.lifeInsSuccessions
                // ajouter le solde net des hÃ©ritages Ã©ventuellement reÃ§us par les enfants dans l'annÃ©e Ã  la liste globale
                netChildrenInheritances += newCashFlowLine.netChildrenInheritances
                
            } catch {
                /// il n'y a plus de Cash => on arrÃªte la simulation
                lastYear = year
                // on calcule les KPI sur la base du dernier bilan connu (fin de l'annÃ©e prÃ©cÃ©dente)
                kpiComputer.computeKpisAtZeroCashAvailable(year                 : year,
                                                           withKPIs             : &kpis,
                                                           withBalanceSheetLine : balanceArray.last)
                SimulationLogger.shared.log(run      : run,
                                            logTopic : LogTopic.simulationEvent,
                                            message  : "Fin du run: ðŸ”´ Ã  cours de cash en \(year)")
                return kpiComputer.currentRunKpiResults // arrÃªter la construction de la table
            }
            
            // construire la ligne annuelle de Bilan de fin d'annÃ©e
            //-----------------------------------------------------
            let newBalanceSheetLine = BalanceSheetLine(year            : year,
                                                       withMembersName : family.membersName,
                                                       withAdultsName  : family.adultsName,
                                                       withAssets      : patrimoine.assets.allOwnableItems,
                                                       withLiabilities : patrimoine.liabilities.allOwnableItems)
            
            if family.nbOfAdultAlive(atEndOf: year) < family.nbOfAdultAlive(atEndOf: year-1) {
                // dÃ©cÃ¨s d'un adulte en cours d'annÃ©e
                // gÃ©rer les KPI nÂ°1, 2, 3, 4, 5 au dÃ©cÃ¨s de l'un ou des 2 conjoints
                // attention: Ã  ce stade les transmissions de succession ont dÃ©jÃ  Ã©tÃ© rÃ©alisÃ©es
                kpiComputer.computeKpisAtDeath(year                               : year,
                                               withKPIs                           : &kpis,
                                               withBalanceArray                   : balanceArray,
                                               initialNetAdultsFinancialAssets    : initialNetAdultsFinancialAssets,
                                               balanceSheetLineAfterTransmission  : newBalanceSheetLine,
                                               allSuccessions                     : legalSuccessions + lifeInsSuccessions,
                                               netChildrenInheritances            : netChildrenInheritances)
            }
            
            balanceArray.append(newBalanceSheetLine)
            
            if family.nbOfAdultAlive(atEndOf: year) == 0 {
                // il n'y a plus d'adulte vivant Ã  la fin de l'annÃ©e
                // on arrÃªte la simulation aprÃ¨s avoir clos les derniÃ¨res successions
                lastYear = year
                SimulationLogger.shared.log(run      : run,
                                            logTopic : LogTopic.simulationEvent,
                                            message  : "Fin du run: plus d'adulte en vie en \(year)")
                return kpiComputer.currentRunKpiResults // arrÃªter la construction de la table
            }
        }
        
        /// KPI nÂ°3 : on est arrivÃ© Ã  la fin de la simulation
        // rechercher le minimum d'actif financier net au cours du temps
        kpiComputer.computeMinimumAssetKpiValue(withKPIs                        : &kpis,
                                                withBalanceArray                : balanceArray,
                                                initialNetAdultsFinancialAssets : initialNetAdultsFinancialAssets)
        SimulationLogger.shared.log(run      : run,
                                    logTopic : LogTopic.simulationEvent,
                                    message  : "Fin du run: date de fin de run atteinte en \(lastYear)")
        return kpiComputer.currentRunKpiResults
    }
}

extension SocialAccounts: CustomStringConvertible {
    public var description: String {
        """

        COMPTES SOCIAUX:
          AnnÃ©e DÃ©but: \(String(describing: firstYear))
          AnnÃ©e Fin  : \(String(describing: lastYear))
          Cash Flow: \(String(describing: cashFlowArray))
          Bilan: \(String(describing: balanceArray))
        \(String(describing: legalSuccessions).withPrefixedSplittedLines("  "))
        \(String(describing: lifeInsSuccessions).withPrefixedSplittedLines("  "))
        \(String(describing: netChildrenInheritances).withPrefixedSplittedLines("  "))
        """
    }
}
